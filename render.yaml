services:
  # Django Web Application
  - type: web
    name: data-warehouse
    env: python
    buildCommand: pip install -r requirements.txt && python manage.py migrate && python manage.py collectstatic --noinput
    startCommand: gunicorn data_warehouse.wsgi:application --bind 0.0.0.0:$PORT
    envVars:
      - key: DJANGO_STATIC_ROOT
        value: /app/staticfiles
      - key: STATIC_URL
        value: /static/
      - key: PYTHONUNBUFFERED
        value: "true"
      - key: WEB_CONCURRENCY
        value: "1"
      - key: CELERY_BROKER_URL
        fromService:
          type: redis
          name: redis
          property: connectionString
      - key: CELERY_RESULT_BACKEND
        fromService:
          type: redis
          name: redis
          property: connectionString
    disk:
      name: static-files
      mountPath: /app/staticfiles
      sizeGB: 1
    healthCheckPath: /admin/login/
    autoDeploy: true

  # Celery Worker - processes background tasks
  - type: worker
    name: celery-worker
    env: python
    buildCommand: pip install -r requirements.txt
    startCommand: celery -A data_warehouse worker --loglevel=info --without-heartbeat --without-mingle --without-gossip
    envVars:
      - key: PYTHONUNBUFFERED
        value: "true"
      - key: CELERY_BROKER_URL
        fromService:
          type: redis
          name: redis
          property: connectionString
      - key: CELERY_RESULT_BACKEND
        fromService:
          type: redis
          name: redis
          property: connectionString
      - key: DATABASE_URL
        sync: false  # Will use the same DATABASE_URL as the web service
      - key: DJANGO_SECRET_KEY
        sync: false  # Will use the same SECRET_KEY as the web service
      - key: DJANGO_SETTINGS_MODULE
        value: data_warehouse.settings
    autoDeploy: true
    numInstances: 1  # Scale based on your needs

  # Celery Beat - schedules periodic tasks
  - type: worker
    name: celery-beat
    env: python
    buildCommand: pip install -r requirements.txt
    startCommand: celery -A data_warehouse beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    envVars:
      - key: PYTHONUNBUFFERED
        value: "true"
      - key: CELERY_BROKER_URL
        fromService:
          type: redis
          name: redis
          property: connectionString
      - key: CELERY_RESULT_BACKEND
        fromService:
          type: redis
          name: redis
          property: connectionString
      - key: DATABASE_URL
        sync: false  # Will use the same DATABASE_URL as the web service
      - key: DJANGO_SECRET_KEY
        sync: false  # Will use the same SECRET_KEY as the web service
      - key: DJANGO_SETTINGS_MODULE
        value: data_warehouse.settings
    autoDeploy: true
    numInstances: 1  # Only run 1 instance of beat scheduler

  # Redis - message broker for Celery
  - type: redis
    name: redis
    plan: starter  # Options: starter (free), standard ($7/month), pro ($15/month)
    maxmemoryPolicy: allkeys-lru  # Memory management policy
    ipAllowList: []  # Allow all addresses (required for Render blueprint)

