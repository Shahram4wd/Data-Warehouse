"""
Django Migration: Migrate Arrivy_SyncHistory to Standardized SyncHistory

This migration safely transfers data from the legacy Arrivy_SyncHistory table
to the standardized SyncHistory table following crm_sync_guide.md requirements.

Generated by Arrivy CRM Sync Migration
"""

from django.db import migrations, models
from datetime import datetime
import pytz

def migrate_arrivy_sync_history_forward(apps, schema_editor):
    """
    Migrate data from Arrivy_SyncHistory to standardized SyncHistory
    
    Data mapping:
    - Arrivy_SyncHistory.sync_type -> SyncHistory.sync_type  
    - Arrivy_SyncHistory.last_synced_at -> SyncHistory.end_time
    - New fields: crm_source='arrivy', status='success' (default for historical records)
    """
    try:
        # Get model classes
        ArrivySyncHistory = apps.get_model('ingestion', 'Arrivy_SyncHistory')
        SyncHistory = apps.get_model('ingestion', 'SyncHistory')
        
        # Get existing records from Arrivy_SyncHistory
        arrivy_records = ArrivySyncHistory.objects.all()
        
        print(f"Migrating {arrivy_records.count()} records from Arrivy_SyncHistory to SyncHistory...")
        
        migrated_count = 0
        batch_size = 1000
        
        # Process records in batches to handle large datasets
        for i in range(0, arrivy_records.count(), batch_size):
            batch = arrivy_records[i:i + batch_size]
            
            for record in batch:
                try:
                    # Map fields from Arrivy_SyncHistory to SyncHistory format
                    sync_data = {
                        'crm_source': 'arrivy',  # MANDATORY: lowercase, no underscores
                        'sync_type': record.sync_type,  # Keep original sync_type
                        'start_time': record.created_at,  # Use created_at as start_time estimate
                        'end_time': record.last_synced_at if record.last_synced_at else record.created_at,
                        'status': 'success',  # Default status for historical records
                        'records_processed': 0,  # Historical data - no metrics available
                        'records_created': 0,
                        'records_updated': 0, 
                        'records_failed': 0,
                        'configuration': {
                            'migrated_from': 'Arrivy_SyncHistory',
                            'original_id': record.id,
                            'migration_date': datetime.now(pytz.UTC).isoformat()
                        },
                        'created_at': record.created_at
                    }
                    
                    # Create new SyncHistory record
                    SyncHistory.objects.create(**sync_data)
                    migrated_count += 1
                    
                except Exception as e:
                    print(f"Warning: Failed to migrate record {record.id}: {str(e)}")
                    continue
            
            print(f"Migrated batch: {min(i + batch_size, arrivy_records.count())}/{arrivy_records.count()}")
        
        print(f"Successfully migrated {migrated_count} records to SyncHistory")
        
    except Exception as e:
        print(f"Error during migration: {str(e)}")
        raise

def migrate_arrivy_sync_history_reverse(apps, schema_editor):
    """
    Reverse migration: Remove migrated SyncHistory records
    
    This removes only the records that were migrated from Arrivy_SyncHistory
    to allow for rollback if needed.
    """
    try:
        SyncHistory = apps.get_model('ingestion', 'SyncHistory')
        
        # Find records that were migrated from Arrivy_SyncHistory
        migrated_records = SyncHistory.objects.filter(
            crm_source='arrivy',
            configuration__migrated_from='Arrivy_SyncHistory'
        )
        
        count = migrated_records.count()
        print(f"Removing {count} migrated SyncHistory records...")
        
        migrated_records.delete()
        
        print(f"Successfully removed {count} migrated records")
        
    except Exception as e:
        print(f"Error during reverse migration: {str(e)}")
        raise

class Migration(migrations.Migration):
    
    dependencies = [
        ('ingestion', '0001_initial'),  # Replace with actual last migration
    ]

    operations = [
        migrations.RunPython(
            migrate_arrivy_sync_history_forward,
            migrate_arrivy_sync_history_reverse
        ),
    ]
