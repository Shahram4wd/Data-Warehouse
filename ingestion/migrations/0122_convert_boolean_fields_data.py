# Generated by Django 4.2.23 on 2025-08-08 19:37

from django.db import migrations


def convert_boolean_fields(apps, schema_editor):
    """
    Convert string values in boolean fields to proper boolean values
    before changing the field types to BooleanField
    """
    GoogleSheetMarketingLead = apps.get_model('ingestion', 'GoogleSheetMarketingLead')
    
    # Define the boolean fields and their conversion logic
    boolean_fields = [
        'lead_set',
        'manager_followup', 
        'multiple_inquiry',
        'spouses_present'
    ]
    
    # Define conversion mapping
    def convert_value(value):
        """Convert string value to boolean"""
        if value is None or value == '':
            return None
        
        # Convert to string and normalize
        str_value = str(value).strip().lower()
        
        # Common true values
        if str_value in ['yes', 'y', 'true', '1', 'on']:
            return True
        
        # Common false values  
        if str_value in ['no', 'n', 'false', '0', 'off']:
            return False
        
        # For numeric values like spouses_present
        try:
            numeric_value = int(float(str_value))
            return numeric_value > 0
        except (ValueError, TypeError):
            pass
        
        # Default to None for unknown values
        return None
    
    # Process records in batches to avoid memory issues
    batch_size = 1000
    total_updated = 0
    
    # Get total count for progress tracking
    total_records = GoogleSheetMarketingLead.objects.count()
    print(f"Converting boolean fields for {total_records} records...")
    
    # Process in batches
    for offset in range(0, total_records, batch_size):
        records = GoogleSheetMarketingLead.objects.all()[offset:offset + batch_size]
        updates = []
        
        for record in records:
            updated = False
            
            for field in boolean_fields:
                current_value = getattr(record, field)
                if current_value is not None and not isinstance(current_value, bool):
                    new_value = convert_value(current_value)
                    setattr(record, field, new_value)
                    updated = True
            
            if updated:
                updates.append(record)
        
        # Bulk update the batch
        if updates:
            GoogleSheetMarketingLead.objects.bulk_update(
                updates, 
                boolean_fields,
                batch_size=batch_size
            )
            total_updated += len(updates)
        
        print(f"Processed {min(offset + batch_size, total_records)} / {total_records} records...")
    
    print(f"Successfully converted boolean fields for {total_updated} records")


def reverse_boolean_conversion(apps, schema_editor):
    """
    Reverse operation - convert boolean values back to strings
    This is a simplified reverse that may not perfectly restore original values
    """
    GoogleSheetMarketingLead = apps.get_model('ingestion', 'GoogleSheetMarketingLead')
    
    boolean_fields = [
        'lead_set',
        'manager_followup', 
        'multiple_inquiry',
        'spouses_present'
    ]
    
    def reverse_convert_value(value):
        """Convert boolean back to string"""
        if value is None:
            return None
        if value is True:
            return 'Yes'
        if value is False:
            return 'No'
        return str(value)
    
    # Process in batches
    batch_size = 1000
    total_records = GoogleSheetMarketingLead.objects.count()
    
    for offset in range(0, total_records, batch_size):
        records = GoogleSheetMarketingLead.objects.all()[offset:offset + batch_size]
        updates = []
        
        for record in records:
            updated = False
            
            for field in boolean_fields:
                current_value = getattr(record, field)
                if isinstance(current_value, bool) or current_value is None:
                    new_value = reverse_convert_value(current_value)
                    setattr(record, field, new_value)
                    updated = True
            
            if updated:
                updates.append(record)
        
        # Bulk update the batch
        if updates:
            GoogleSheetMarketingLead.objects.bulk_update(
                updates, 
                boolean_fields,
                batch_size=batch_size
            )


class Migration(migrations.Migration):

    dependencies = [
        ('ingestion', '0120_update_gsheet_marketing_lead_fields'),
    ]

    operations = [
        migrations.RunPython(
            convert_boolean_fields,
            reverse_boolean_conversion,
        ),
    ]
